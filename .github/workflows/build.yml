name: Build UZ801 Debian Kernel
on:
  workflow_dispatch:

jobs:
  build:
    name: Build kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Configuration
        run: |
          CONFIG_ENV=$(grep -w "CONFIG_ENV" config.env | head -n 1 | cut -d "=" -f 2)
          CONFIG_LIST=(
              KERNEL_SOURCE
              KERNEL_BRANCH
              CONFIG_FILE_SOURCE
              REMOVE_UNUSED_PACKAGES
              ENABLE_CCACHE
          )
          
          for CONFIG in "${CONFIG_LIST[@]}"; do
              echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          done

      - name: Remove unused packages
        if: env.REMOVE_UNUSED_PACKAGES == 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: ture
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: Setup build kernel environment
        run: |
          echo "TIMEDATE=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          sudo dpkg --add-architecture arm64
          sudo wget https://raw.githubusercontent.com/c0asters/UZ801_Debian_Kernel/refs/heads/main/config/sources.list -O /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
          sudo apt-get install libssl-dev:arm64 gcc-aarch64-linux-gnu g++-aarch64-linux-gnu debhelper-compat libelf-dev:native
          sudo apt-get install android-libbase android-liblog android-libsparse android-sdk-libsparse-utils img2simg initramfs-tools
          mkdir -p $GITHUB_WORKSPACE/kernel_workflow

      - name: Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Download Kernel And Mod 
        run: |
          cd $GITHUB_WORKSPACE/kernel_workflow
          git clone --recursive ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_BRANCH }} debian_kernel --depth=1
          wget ${{ env.CONFIG_FILE_SOURCE }} -O debian_kernel/.config

      - name: Download mkbootimg tools
        run: |
          cd $GITHUB_WORKSPACE/kernel_workflow
          git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools -b master-kernel-build-2022 --depth=1

      - name: Setup ccache
        if: env.ENABLE_CCACHE == 'true'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-kernel-${{ env.TIMEDATE }}
          max-size: 2G

      - name: Build Kernel
        run: |
          cd $GITHUB_WORKSPACE/kernel_workflow/debian_kernel
          scripts/config --set-val CONFIG_HZ_PERIODIC y
          scripts/config --set-val CONFIG_NO_HZ_IDLE n
          scripts/config --set-val CONFIG_NO_HZ_FULL n
          yes y | make CC="ccache aarch64-linux-gnu-gcc" CXX="ccache aarch64-linux-gnu-g++" ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc --all)
          make  CC="ccache aarch64-linux-gnu-gcc" CXX="ccache aarch64-linux-gnu-g++" ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- deb-pkg -j$(nproc --all)
          cat arch/arm64/boot/Image.gz arch/arm64/boot/dts/qcom/msm8916-thwc-ufi003-no-modem-oc.dtb > kernel-dtb 
          sudo make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules_install -j$(nproc --all)
          MKINIT_FOLDER=$(ls -d /lib/modules/*-msm8916-* | xargs -n 1 basename)
          sudo mkinitramfs $MKINIT_FOLDER -o ./initrd.img

      - name: Check compiled files
        run: |
           cd $GITHUB_WORKSPACE/kernel_workflow
           if [ -f linux-headers-* ]; then
              ls -al
              echo "BOOT_STATUS=true" >> $GITHUB_ENV
              echo "HEADER=$(ls linux-headers-*.deb)" >> $GITHUB_ENV
              echo "IMAGE=$(ls linux-image-*.deb)" >> $GITHUB_ENV
              echo "LLIBC=$(ls linux-libc*.deb)" >> $GITHUB_ENV
           else
              echo "compiled files is empty"
              exit 1
           fi

      - name: Upload boot headers
        if: env.BOOT_STATUS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: boot_header.deb
          path: kernel_workflow/${{ env.HEADER }}
          
      - name: Upload boot image
        if: env.BOOT_STATUS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: boot_image.deb
          path: kernel_workflow/${{ env.IMAGE }}
          
      - name: Upload libc
        if: env.BOOT_STATUS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: boot_libc.deb
          path: kernel_workflow/${{ env.LLIBC }}


      - name: Upload dtb 
        if: env.BOOT_STATUS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: kernel-dtb
          path: kernel_workflow/debian_kernel/kernel-dtb

